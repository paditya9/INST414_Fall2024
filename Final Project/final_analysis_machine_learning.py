# -*- coding: utf-8 -*-
"""Final Analysis - Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19-FKMv2qG9qOCMrAEnI6mhuPDaxgBDpl
"""

from google.colab import files
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

original_file_path = 'Indicators_of_Anxiety_or_Depression.csv'
file_path_2024 = 'Module1_Dataset.xlsx'

df1 = pd.read_excel("Module1_Dataset.xlsx")
df1.dropna(inplace=True)
df1 = df1[['State', 'Value', 'Low CI', 'High CI']]

print(f"Shape of 2024 Dataset: {df1.shape}\n")

inertia = []
inertia_range = range(1, 10)

for k in inertia_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(df1[['Value', 'Low CI', 'High CI']])
    inertia.append(kmeans.inertia_)


plt.figure(figsize=(8, 5))
plt.plot(inertia_range, inertia, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.show()

k_optimal = 3
kmeans = KMeans(n_clusters=k_optimal, random_state=42)
df1['Cluster'] = kmeans.fit_predict(df1[['Value', 'Low CI', 'High CI']])

print("Clustered Data Sample:")
print(df1)

plt.figure(figsize=(8, 5))
for cluster in range(k_optimal):
    clustered_data = df1[df1['Cluster'] == cluster]
    plt.scatter(clustered_data['Value'], clustered_data['Low CI'], label=f'Cluster {cluster}')
plt.xlabel('Value')
plt.ylabel('Low CI')
plt.legend()
plt.title('Clusters Visualization of States with Lower Confidence Interval')
plt.show()

plt.figure(figsize=(8, 5))
for cluster in range(k_optimal):
    clustered_data = df1[df1['Cluster'] == cluster]
    plt.scatter(clustered_data['Value'], clustered_data['High CI'], label=f'Cluster {cluster}')
plt.xlabel('Value')
plt.ylabel('High CI')
plt.legend()
plt.title('Clusters Visualization of States with Higher Confidence Interval')
plt.show()

df = pd.read_csv(original_file_path)
df_2024 = pd.read_excel(file_path_2024)

df = df[df['Time Period Label'].str.contains('2023|2022|2021|2020', na=False)]
df = df[df['State'] != 'United States']
df['Value'] = pd.to_numeric(df['Value'], errors='coerce')
df = df.dropna(subset=['Value'])
df = df[['Indicator', 'State', 'Time Period Start Date', 'Value']]

print(f"Shape of 2020-2023 Dataset: {df.shape}\n")

encoder = LabelEncoder()
df['State_encoded'] = encoder.fit_transform(df['State'])

df['Time Period Start Date'] = pd.to_datetime(df['Time Period Start Date'], errors='coerce')
df['Month'] = df['Time Period Start Date'].dt.month

df_2024['Value'] = pd.to_numeric(df_2024['Value'], errors='coerce')
df_2024['Time Period Start Date'] = pd.to_datetime(df_2024['Time Period Start Date'], errors='coerce')
df_2024['Month'] = df_2024['Time Period Start Date'].dt.month
df_2024['State_encoded'] = encoder.transform(df_2024['State'])

clustering_features = df[['Value', 'State_encoded']]
kmeans = KMeans(n_clusters=3, random_state=42)
df['Cluster'] = kmeans.fit_predict(clustering_features)

regression_features = df[['State_encoded', 'Cluster', 'Month']]
regression_target = df['Value']

X_train, X_test, y_train, y_test = train_test_split(regression_features, regression_target, test_size=0.2, random_state=42)

linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

states = df['State_encoded'].unique()
months_to_predict = range(1, 7)
all_predictions_updated = []

for state in states:
    for month in months_to_predict:
        state_cluster = df[df['State_encoded'] == state]['Cluster'].values[0]
        prediction_input = pd.DataFrame({
            'State_encoded': [state],
            'Cluster': [state_cluster],
            'Month': [month]
        })
        predicted_value = linear_model.predict(prediction_input)[0]
        all_predictions_updated.append([encoder.inverse_transform([state])[0], month, predicted_value])

updated_predictions_df = pd.DataFrame(all_predictions_updated, columns=['State', 'Month', 'Predicted Value'])

merged_df = updated_predictions_df.merge(
    df_2024[['State', 'Month', 'Value', 'State_encoded']],
    on=['State', 'Month'],
    how='inner',
    suffixes=('_predicted', '_actual')
)

merged_df['Error'] = merged_df['Predicted Value'] - merged_df['Value']
merged_df['Absolute Error'] = merged_df['Error'].abs()
merged_df['Squared Error'] = merged_df['Error'] ** 2

mae = merged_df['Absolute Error'].mean()
mse = merged_df['Squared Error'].mean()

print(f"The Mean Average Error is: {mae}")
print(f"\nThe Mean Sqaured Error is: {mse}")
print(f"\nThe Predict Value of all states for the first half of 2024:\n{merged_df}")

merged_df.to_csv("finalDataFrame.csv")
files.download('finalDataFrame.csv')

df_filtered = merged_df[['State', 'Value', 'Predicted Value', 'Month']]
state_values = df_filtered.groupby(['State'])['Value'].mean().sort_values()
lowest_states = state_values.head(5)
highest_states = state_values.tail(5)

print(f"Top 5 U.S States with Mean Lowest Anxiety and Depress Predicted Values: \n{lowest_states}\n\nTop 5 U.S States with Mean Highest Anxiety and Depress Predicted Values: \n{highest_states}")

highest_predicted_state = "Mississippi"
highest_predicted_data = df_filtered[df_filtered['State'] == highest_predicted_state]

lowest_predicted_state = "New Jersey"
lowest_predicted_data = df_filtered[df_filtered['State'] == lowest_predicted_state]

plt.figure(figsize=(12, 6))
plt.scatter(highest_predicted_data['Month'], highest_predicted_data['Value'], color='blue', label=f'Actual - {highest_predicted_state}', s=100)
plt.plot(highest_predicted_data['Month'], highest_predicted_data['Predicted Value'], marker='x', linestyle='--', color='red', label=f'Predicted - {highest_predicted_state}')
plt.xlabel('Month')
plt.ylabel('Value')
plt.title(f'Actual vs Predicted Values for {highest_predicted_state} (Highest Predicted Value)')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(12, 6))
plt.scatter(lowest_predicted_data['Month'], lowest_predicted_data['Value'], color='blue', label=f'Actual - {lowest_predicted_state}', s=100)
plt.plot(lowest_predicted_data['Month'], lowest_predicted_data['Predicted Value'], marker='x', linestyle='--', color='red', label=f'Predicted - {lowest_predicted_state}')
plt.xlabel('Month')
plt.ylabel('Value')
plt.title(f'Actual vs Predicted Values for {lowest_predicted_state} (Lowest Predicted Value)')
plt.legend()
plt.grid(True)
plt.show()